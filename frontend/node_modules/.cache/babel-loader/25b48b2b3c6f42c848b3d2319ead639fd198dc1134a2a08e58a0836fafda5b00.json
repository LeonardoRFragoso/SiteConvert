{"ast":null,"code":"var _jsxFileName = \"/home/leonardo/Documentos/SiteConvert/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Button from \"./components/ui/button\";\nimport Input from \"./components/ui/input\";\nimport Progress from \"./components/ui/progress\";\nimport { ThemeProvider } from \"./context/ThemeContext\"; // Contexto de tema\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [fileType, setFileType] = useState(\"\");\n  const [convertedFile, setConvertedFile] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [downloadFormat, setDownloadFormat] = useState(\"\"); // Armazena o formato do download\n\n  const apiURL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\n  const handleFileUpload = event => {\n    var _supportedFormats$typ;\n    const uploadedFile = event.target.files[0];\n    if (!uploadedFile) {\n      setError(\"Nenhum arquivo selecionado.\");\n      setFile(null);\n      return;\n    }\n    const type = uploadedFile.type.split(\"/\")[0];\n    const extension = uploadedFile.name.split(\".\").pop().toLowerCase();\n    const supportedFormats = {\n      image: [\"jpeg\", \"jpg\", \"png\", \"svg\", \"bmp\", \"tiff\"],\n      audio: [\"mp3\", \"wav\", \"ogg\", \"flac\", \"m4a\"],\n      application: [\"pdf\", \"docx\"]\n    };\n    if (!((_supportedFormats$typ = supportedFormats[type]) !== null && _supportedFormats$typ !== void 0 && _supportedFormats$typ.includes(extension))) {\n      setError(`Formato de arquivo .${extension} não é suportado.`);\n      setFile(null);\n      return;\n    }\n    setFileType(type);\n    setFile(uploadedFile);\n    setConvertedFile(null);\n    setError(\"\");\n  };\n  const handleConversion = format => {\n    if (!file) {\n      setError(\"Por favor, envie um arquivo primeiro.\");\n      return;\n    }\n    setIsProcessing(true);\n    setProgress(0);\n    setDownloadFormat(format);\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"format\", format);\n    let apiEndpoint = `${apiURL}/convert/image`;\n    if (fileType === \"audio\") {\n      apiEndpoint = `${apiURL}/convert/audio`;\n    } else if (fileType === \"application\" && file.name.endsWith(\".pdf\")) {\n      apiEndpoint = `${apiURL}/convert/pdf_to_images`;\n    } else if (fileType === \"application\" && file.name.endsWith(\".docx\")) {\n      apiEndpoint = `${apiURL}/convert/docx_to_pdf`;\n    }\n    fetch(apiEndpoint, {\n      method: \"POST\",\n      body: formData\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`Erro do servidor: ${response.status} - ${response.statusText}`);\n      }\n      return response.blob();\n    }).then(blob => {\n      const downloadUrl = window.URL.createObjectURL(blob);\n      setConvertedFile(downloadUrl);\n    }).catch(err => {\n      setError(err.message || \"Erro inesperado ao converter o arquivo\");\n      console.error(\"Erro no processamento do arquivo:\", err);\n    }).finally(() => {\n      setProgress(100);\n      setIsProcessing(false);\n    });\n  };\n  const reset = () => {\n    setFile(null);\n    setFileType(\"\");\n    setConvertedFile(null);\n    setProgress(0);\n    setError(\"\");\n    setIsProcessing(false);\n    setDownloadFormat(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"almZEZqMkFDs2QsgaeDAxMtCKIo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Button","Input","Progress","ThemeProvider","jsxDEV","_jsxDEV","App","_s","file","setFile","fileType","setFileType","convertedFile","setConvertedFile","progress","setProgress","error","setError","isProcessing","setIsProcessing","downloadFormat","setDownloadFormat","apiURL","process","env","REACT_APP_API_URL","handleFileUpload","event","_supportedFormats$typ","uploadedFile","target","files","type","split","extension","name","pop","toLowerCase","supportedFormats","image","audio","application","includes","handleConversion","format","formData","FormData","append","apiEndpoint","endsWith","fetch","method","body","then","response","ok","Error","status","statusText","blob","downloadUrl","window","URL","createObjectURL","catch","err","message","console","finally","reset","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/leonardo/Documentos/SiteConvert/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Button from \"./components/ui/button\";\nimport Input from \"./components/ui/input\";\nimport Progress from \"./components/ui/progress\";\nimport { ThemeProvider } from \"./context/ThemeContext\"; // Contexto de tema\nimport \"./App.css\";\n\nconst App = () => {\n  const [file, setFile] = useState(null);\n  const [fileType, setFileType] = useState(\"\");\n  const [convertedFile, setConvertedFile] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [downloadFormat, setDownloadFormat] = useState(\"\"); // Armazena o formato do download\n\n  const apiURL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\n\n  const handleFileUpload = (event) => {\n    const uploadedFile = event.target.files[0];\n\n    if (!uploadedFile) {\n      setError(\"Nenhum arquivo selecionado.\");\n      setFile(null);\n      return;\n    }\n\n    const type = uploadedFile.type.split(\"/\")[0];\n    const extension = uploadedFile.name.split(\".\").pop().toLowerCase();\n    const supportedFormats = {\n      image: [\"jpeg\", \"jpg\", \"png\", \"svg\", \"bmp\", \"tiff\"],\n      audio: [\"mp3\", \"wav\", \"ogg\", \"flac\", \"m4a\"],\n      application: [\"pdf\", \"docx\"],\n    };\n\n    if (!supportedFormats[type]?.includes(extension)) {\n      setError(`Formato de arquivo .${extension} não é suportado.`);\n      setFile(null);\n      return;\n    }\n\n    setFileType(type);\n    setFile(uploadedFile);\n    setConvertedFile(null);\n    setError(\"\");\n  };\n\n  const handleConversion = (format) => {\n    if (!file) {\n      setError(\"Por favor, envie um arquivo primeiro.\");\n      return;\n    }\n\n    setIsProcessing(true);\n    setProgress(0);\n    setDownloadFormat(format);\n\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"format\", format);\n\n    let apiEndpoint = `${apiURL}/convert/image`;\n    if (fileType === \"audio\") {\n      apiEndpoint = `${apiURL}/convert/audio`;\n    } else if (fileType === \"application\" && file.name.endsWith(\".pdf\")) {\n      apiEndpoint = `${apiURL}/convert/pdf_to_images`;\n    } else if (fileType === \"application\" && file.name.endsWith(\".docx\")) {\n      apiEndpoint = `${apiURL}/convert/docx_to_pdf`;\n    }\n\n    fetch(apiEndpoint, {\n      method: \"POST\",\n      body: formData,\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\n            `Erro do servidor: ${response.status} - ${response.statusText}`\n          );\n        }\n        return response.blob();\n      })\n      .then((blob) => {\n        const downloadUrl = window.URL.createObjectURL(blob);\n        setConvertedFile(downloadUrl);\n      })\n      .catch((err) => {\n        setError(err.message || \"Erro inesperado ao converter o arquivo\");\n        console.error(\"Erro no processamento do arquivo:\", err);\n      })\n      .finally(() => {\n        setProgress(100);\n        setIsProcessing(false);\n      });\n  };\n\n  const reset = () => {\n    setFile(null);\n    setFileType(\"\");\n    setConvertedFile(null);\n    setProgress(0);\n    setError(\"\");\n    setIsProcessing(false);\n    setDownloadFormat(\"\");\n  };\n\n  return (\n    <ThemeProvider>\n      <div className=\"app-container\">{/* Estrutura do App */}</div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}